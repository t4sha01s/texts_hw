import json
import re
from typing import List, Optional, Dict
from contextlib import asynccontextmanager

import uvicorn
from fastapi import FastAPI, Request, Depends
from pydantic import BaseModel


import inspect

if not hasattr(inspect, "getargspec"):
    from collections import namedtuple
    ArgSpec = namedtuple("ArgSpec", "args varargs keywords defaults")
    def getargspec(func):
        from inspect import signature, Parameter
        params = signature(func).parameters
        args = [p for p in params if params[p].kind == Parameter.POSITIONAL_OR_KEYWORD]
        varargs = next((p for p in params if params[p].kind == Parameter.VAR_POSITIONAL), None)
        varkw = next((p for p in params if params[p].kind == Parameter.VAR_KEYWORD), None)
        defaults = tuple(p.default for p in params.values() if p.default is not Parameter.empty)
        return ArgSpec(args, varargs, varkw, defaults)
    inspect.getargspec = getargspec
    
import pymorphy2
from pymorphy2 import MorphAnalyzer

# ============================================================
#   –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ============================================================

class LawLink(BaseModel):
    law_id: Optional[int] = None
    article: Optional[str] = None
    point_article: Optional[str] = None
    subpoint_article: Optional[str] = None


class LinksResponse(BaseModel):
    links: List[LawLink]


class TextRequest(BaseModel):
    text: str


# ============================================================
#   –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–ê
# ============================================================

class TextProcessor:
    def __init__(self, law_aliases: Dict = None):
        self.law_aliases = law_aliases or {}
        self.patterns = self.compile_patterns()
        self.morph = pymorphy2.MorphAnalyzer()

        # --- –æ–±—Ä–∞—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–ª–∏–∞—Å–æ–≤ ---
        self.alias_to_id = {}
        for law_id, aliases in self.law_aliases.items():
            for alias in aliases:
                normalized_alias = self.normalize_law_name(alias)
                self.alias_to_id[normalized_alias] = int(law_id)

        # --- —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –ø–æ –¥–ª–∏–Ω–µ ---
        self.sorted_aliases = sorted(self.alias_to_id.keys(), key=len, reverse=True)

    def compile_patterns(self) -> Dict[str, re.Pattern]:
        return {
            'article': re.compile(
                r'(?:—Å—Ç|—Å—Ç–∞—Ç—å—è|—Å—Ç–∞—Ç—å–∏|—Å—Ç–∞—Ç—å–µ–π|—Å—Ç–∞—Ç—å—é|—Å—Ç–∞—Ç—å–µ|—Å—Ç\.)\s*(\d+(?:\.\d+)*)',
                re.IGNORECASE
            ),
            'point': re.compile(
                r'(?<!\w)(?:–ø|–ø—É–Ω–∫—Ç|–ø\.)\s*(\d+|[–∞-—è])(?!\w)',
                re.IGNORECASE
            ),
            'subpoint': re.compile(
                r'(?<!\w)(?:–ø–æ–¥–ø|–ø–æ–¥–ø—É–Ω–∫—Ç|–ø–æ–¥–ø\.)\s*(\d+|[–∞-—è])(?!\w)',
                re.IGNORECASE
            ),
        }

    def normalize_law_name(self, text: str) -> str:
        words = re.findall(r'\b[–∞-—è]+\b', text.lower())
        normalized_words = []
        for word in words:
            try:
                parsed = self.morph.parse(word)[0]
                normalized_words.append(parsed.normal_form)
            except Exception:
                normalized_words.append(word)
        return ' '.join(normalized_words)

    def find_law_mentions(self, text: str) -> List[int]:
        normalized_text = self.normalize_law_name(text)
        found_ids = set()
        for alias in self.sorted_aliases:
            pattern = r'\b' + re.escape(alias) + r'\b'
            if re.search(pattern, normalized_text):
                found_ids.add(self.alias_to_id[alias])
        return list(found_ids)

    def extract_law_references(self, text: str) -> List[LawLink]:
        law_links = []
        law_ids = self.find_law_mentions(text)
        articles = self.patterns['article'].findall(text)
        points = self.patterns['point'].findall(text)
        subpoints = self.patterns['subpoint'].findall(text)

        for law_id in law_ids:
            for i, article in enumerate(articles):
                link = LawLink(law_id=law_id, article=article)
                if points and i < len(points):
                    link.point_article = points[i]
                if subpoints and i < len(subpoints):
                    link.subpoint_article = subpoints[i]
                law_links.append(link)

        # —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_links = []
        seen = set()
        for link in law_links:
            key = (link.law_id, link.article, link.point_article, link.subpoint_article)
            if key not in seen:
                seen.add(key)
                unique_links.append(link)
        return unique_links


# ============================================================
#   FASTAPI –°–ï–†–í–ò–°
# ============================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    # --- Startup ---
    with open("law_aliases.json", "r", encoding="utf-8") as file:
        codex_aliases = json.load(file)

    # —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    app.state.processor = TextProcessor(codex_aliases)
    print("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞...")
    yield
    # --- Shutdown ---
    del codex_aliases
    del app.state.processor
    print("üõë –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")


def get_processor(request: Request) -> TextProcessor:
    return request.app.state.processor


app = FastAPI(
    title="Law Links Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞",
    version="1.0.0",
    lifespan=lifespan
)


@app.post("/detect", response_model=LinksResponse)
async def get_law_links(
    data: TextRequest,
    processor: TextProcessor = Depends(get_processor)
):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    """
    links = processor.extract_law_references(data.text)
    return LinksResponse(links=links)


@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {"status": "healthy"}


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8978)
